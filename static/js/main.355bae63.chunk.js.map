{"version":3,"sources":["Components/UserBox.js","Components/UserList.js","Components/ControlColumn.js","Components/Messages.js","Components/MessageBox.js","Components/MessageColumn.js","App.js","serviceWorker.js","index.js"],"names":["UserBox","state","userName","onUserSubmit","e","preventDefault","_this","props","setUserName","enableUser","onChange","setState","target","value","react_default","a","createElement","Fragment","action","onSubmit","this","Input","id","size","Button","icon","onClick","placeholder","Component","UserList","userList","users","map","user","index","Card","key","replace","className","Image","src","concat","style","fontSize","alt","avatar","Header","ControlColumn","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","socket","on","Grid","Column","textAlign","width","userEnabled","Components_UserList","Components_UserBox","Messages","currMessages","inMessages","msgObj","Feed","Event","Label","Content","Summary","User","Date","moment","format","Extra","message","console","log","newMessageObj","toConsumableArray","length","MessageBox","onMessageSubmit","emit","disabled","fluid","MessageColumn","Components_Messages","Components_MessageBox","App","usr","io","columns","Components_ControlColumn","Components_MessageColumn","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.355bae63.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Input, Button } from 'semantic-ui-react'\n\nclass UserBox extends Component {\n\n  state = {\n    userName: ''\n  }\n\n  onUserSubmit = (e) => {\n    e.preventDefault()\n    this.props.setUserName(this.state.userName)\n    this.props.enableUser()\n  }\n\n  onChange = (e) => {\n    this.setState({ userName: e.target.value})\n  }\n\n  render() {\n    return(\n      <>\n        <form action=\"\" onSubmit={this.onUserSubmit}>\n          <Input id='userbox' size='big' action={<Button icon='address card' onClick={this.onUserSubmit} />} onChange={this.onChange} value={this.state.userName} placeholder='Username' />\n        </form>\n      </>\n    )\n  }\n}\n\nexport default UserBox","import React, { Component } from 'react'\nimport { Card, Image } from 'semantic-ui-react'\n\nclass UserList extends Component {\n\n  userList = () => {\n    return (\n      this.props.users.map((user, index) => {\n        return (\n          <Card key={user['id'].replace(/[_]/g, \"\")}>\n            <div className='user-list-name-align'>\n              <Image src={`https://robohash.org/${user['name']}?size=200x200`} style={{ 'fontSize': 42 }} alt=\"avatar image\" avatar />\n              <span id='user-list-name'>{user['name']}</span>\n            </div>\n            <Card.Header>\n              {/* put is typing here */}\n            </Card.Header>\n          </Card>\n        )\n      })\n    )\n  }\n  \n  render() {\n    return(\n      <>\n        Current Users\n        {this.userList()}\n      </>\n    )\n  }\n}\n\nexport default UserList","import React, { Component } from 'react'\nimport { Grid } from 'semantic-ui-react'\nimport UserBox from '../Components/UserBox'\nimport UserList from './UserList';\n\nclass ControlColumn extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      users: [],\n    }\n\n    this.props.socket.on('join room', (users) => {\n      this.setState({ users: users})\n    })\n\n    this.props.socket.on('leave room', (users) => {\n      this.setState({ users: users})\n    })\n  }\n\n  render() {\n    return (\n      <Grid.Column textAlign='center' width={4}>\n        <div className='controlcol'>\n          {this.props.userEnabled ?\n            <UserList users={this.state.users} /> :\n            <UserBox setUserName={this.props.setUserName} enableUser={this.props.enableUser} />\n          }\n        </div>\n      </Grid.Column>\n    )\n  }\n}\n\nexport default ControlColumn","import React, { Component } from 'react'\nimport { Feed } from 'semantic-ui-react'\nimport moment from 'moment'\n\nclass Messages extends Component {\n\n  constructor(props) {\n\n    super(props)\n\n    this.state = {\n      inMessages: []\n    }\n\n    this.props.socket.on('chat message', (message , userName) => {\n      console.log(userName)\n      const newMessageObj = { message, userName }\n      this.setState({ inMessages: [...this.state.inMessages, newMessageObj] })\n    })\n  }\n\n  currMessages = () => {\n    return (\n      <div>\n        <ul>\n          {this.state.inMessages.map((msgObj, index) => {\n            return (\n              <li key={index}>\n                <Feed>\n                  <Feed.Event>\n                    <Feed.Label>\n                      <img src={`https://robohash.org/${msgObj['userName']}`} alt='robot user avatar'  />\n                    </Feed.Label>\n                    <Feed.Content>\n                      <Feed.Summary>\n                        <Feed.User>{msgObj['userName']}</Feed.User>\n                        {/* Put message time here */}\n                        <Feed.Date>{moment().format('h:mm:ss a')}</Feed.Date>\n                      </Feed.Summary>\n                    <Feed.Extra>\n                      {msgObj['message']}\n                    </Feed.Extra>\n                    </Feed.Content>\n                  </Feed.Event>\n                </Feed>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n\n  render () {\n    return (\n      <>\n        {this.state.inMessages.length === 0 ? \n          <div>No Messages</div> :\n          this.currMessages() \n        }\n      </>\n    )\n  }\n}\n\nexport default Messages","import React, { Component } from 'react'\nimport { Input, Button } from 'semantic-ui-react'\n\nclass MessageBox extends Component {\n\n  state = {\n    message: ''\n  }\n\n  onMessageSubmit = (e) => {\n    e.preventDefault()\n    this.props.socket.emit('chat message', this.state.message, this.props.userName)\n    this.setState({ message: '' })\n  }\n\n  onChange = (e) => {\n    this.setState({ message: e.target.value})\n  }\n\n  render () { \n    return(\n      <>\n      <form id='messagebox'  action=\"\" onSubmit={this.onMessageSubmit}>\n        <Input disabled={!this.props.userEnabled}  fluid action={<Button icon='chat' onClick={this.onMessageSubmit} />} onChange={this.onChange} value={this.state.message}  placeholder='Your chatter goes here...' />\n      </form>\n      </>\n    )\n  }\n}\n\nexport default MessageBox","import React, { Component } from 'react'\nimport { Grid } from 'semantic-ui-react'\nimport Messages from './Messages'\nimport MessageBox from './MessageBox'\n\nclass MessageColumn extends Component {\n  render() {\n    return (\n      <>\n        <Grid.Column width={8}>\n          <div className='messagecol'>\n            <Messages socket={this.props.socket} />\n            <MessageBox userName={this.props.userName} userEnabled={this.props.userEnabled} socket={this.props.socket} />\n          </div>\n        </Grid.Column>\n      </>\n    )\n  }\n}\n\nexport default MessageColumn","import React, { Component } from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Grid } from 'semantic-ui-react'\nimport '../src/App.css'\nimport io from 'socket.io-client'\nimport ControlColumn from './Components/ControlColumn'\nimport MessageColumn from './Components/MessageColumn'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      userEnabled: false,\n      userName: '',\n    }\n    \n    this.socket = io('https://thawing-basin-98882.herokuapp.com/')\n  }\n\n  enableUser = () => {\n    this.setState({ userEnabled: true })\n  }\n\n  setUserName = (usr) => {\n    this.setState({ userName: usr }, () => {\n      this.socket.emit('join room', this.state.userName)\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Grid columns='equal'>\n          <ControlColumn socket={this.socket} setUserName={this.setUserName} enableUser={this.enableUser} userEnabled={this.state.userEnabled}/>\n          <MessageColumn socket={this.socket} userEnabled={this.state.userEnabled} userName={this.state.userName}/>\n        </Grid>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}